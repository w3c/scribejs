/* eslint-disable no-underscore-dangle */

'use strict';

/*
*
* TODO:
* - add the new field to the Browserify version, and expand the 'bridge' part to include the action handling
*/

/**
 * Class to maintain actions.
 *
 * An Action structure is an object, of the following structure:
 *
 * ```
 * "config" : {
 *    url_pattern: <A pattern for the URL-s into the minutes; it may include the patterns %YEAR%, %MONTH%, %DAY%, %DATE%.
 *                  Used to generate the URL-s for the actions into the minutes.>
 * },
 * "actions" {
 *    "<username>" : [{
 *        "url"  : <URL into the minutes of the meeting where the action was raised; this is generated by the script>,
 *        "date" : <Date when the action was raised>,
 *        "id"   : <the fragment ID to be used to generate the final url>,
 *        "action" : <the text of the action>
 *        "open" : <boolean value; currently only 'true' is used, but may be used later to display closed issues>
 *    }]
 * }
 * ```
 *
 */
class ActionList {
    /**
     *
     * @param {Object} actions â€“ initial set of actions of the structure described abov
     */
    constructor(actions) {
        // Lots of check and further action is needed here!!!
        this._actions = actions;
        this._action_list = this._actions.actions;
        this._action_config = this._actions.config;
        this._url = '';
        this._changed = false;
    }

    /**
     * Whether the actions were changed since init
     *
     * @returns {Boolean}
     */
    get changed() { return this._changed; }

    /**
     * Set the date (in ISO format). This method _MUST_ be invoked before any adding a new action. The string
     * is used to resolve the generic URL pattern to generate the right urls for actions.
     *
     * @param {string} date
     */
    set_date(date) {
        this.date = date;
        const [year, month, day] = this.date.split('-');
        this._url = this._action_config.url_pattern
            .replace(/%YEAR%/, year)
            .replace(/%MONTH%/, month)
            .replace(/%DAY%/, day)
            .replace(/%DATE%/, this.date);
    }

    /**
     * Add a new action to the list. If the action is already in the list, then the method returns. (This is important if the
     * minutes are generated several times to refine it, so that actions are not repeated.)
     *
     * @param {string} name - User name for the action
     * @param {string} action - action text
     * @param {string} id - the id (in the minutes) of the action
     */
    add_action(name, action, id) {
        const url = `${this._url}#${id}`;
        const new_action = {
            date : this.date,
            url,
            id,
            action,
            open : true
        };
        if (name in this._action_list) {
            // see if the action has already been recorded
            if (this._action_list[name].find((act) => act.url === url) === undefined) {
                this._action_list[name].push(new_action);
                this._changed = true;
            }
        } else {
            this._action_list[name] = [new_action];
            this._changed = true;
        }
    }

    /**
     * Mainly for debug: return the string representing the list of actions only
     */
    toString() {
        return JSON.stringify(this._action_list, null, 4);
    }

    /**
     * Return a JSON representation of the whole action structure (including `config`), ready to be stored in a file.
     */
    toStore() {
        return JSON.stringify(this._actions, null, 4);
    }
}


module.exports = { ActionList };
